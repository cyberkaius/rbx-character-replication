--!native
--!optimize 2
--!nocheck
--!nolint
--#selene: allow(unused_variable, incorrect_standard_library_use, global_usage)
-- Client generated by Zap v0.6.14 (https://github.com/red-blox/zap)
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

local outgoing_buff: buffer
local outgoing_used: number
local outgoing_size: number
local outgoing_inst: { Instance }
local outgoing_apos: number

local incoming_buff: buffer
local incoming_read: number
local incoming_inst: { Instance }
local incoming_ipos: number

-- thanks to https://dom.rojo.space/binary.html#cframe
local CFrameSpecialCases = {
	CFrame.Angles(0, 0, 0),
	CFrame.Angles(math.rad(90), 0, 0),
	CFrame.Angles(0, math.rad(180), math.rad(180)),
	CFrame.Angles(math.rad(-90), 0, 0),
	CFrame.Angles(0, math.rad(180), math.rad(90)),
	CFrame.Angles(0, math.rad(90), math.rad(90)),
	CFrame.Angles(0, 0, math.rad(90)),
	CFrame.Angles(0, math.rad(-90), math.rad(90)),
	CFrame.Angles(math.rad(-90), math.rad(-90), 0),
	CFrame.Angles(0, math.rad(-90), 0),
	CFrame.Angles(math.rad(90), math.rad(-90), 0),
	CFrame.Angles(0, math.rad(90), math.rad(180)),
	CFrame.Angles(0, math.rad(-90), math.rad(180)),
	CFrame.Angles(0, math.rad(180), math.rad(0)),
	CFrame.Angles(math.rad(-90), math.rad(-180), math.rad(0)),
	CFrame.Angles(0, math.rad(0), math.rad(180)),
	CFrame.Angles(math.rad(90), math.rad(180), math.rad(0)),
	CFrame.Angles(0, math.rad(0), math.rad(-90)),
	CFrame.Angles(0, math.rad(-90), math.rad(-90)),
	CFrame.Angles(0, math.rad(-180), math.rad(-90)),
	CFrame.Angles(0, math.rad(90), math.rad(-90)),
	CFrame.Angles(math.rad(90), math.rad(90), 0),
	CFrame.Angles(0, math.rad(90), 0),
	CFrame.Angles(math.rad(-90), math.rad(90), 0),
}

local function alloc(len: number)
	if outgoing_used + len > outgoing_size then
		while outgoing_used + len > outgoing_size do
			outgoing_size = outgoing_size * 2
		end

		local new_buff = buffer.create(outgoing_size)
		buffer.copy(new_buff, 0, outgoing_buff, 0, outgoing_used)

		outgoing_buff = new_buff
	end

	outgoing_apos = outgoing_used
	outgoing_used = outgoing_used + len

	return outgoing_apos
end

local function read(len: number)
	local pos = incoming_read
	incoming_read = incoming_read + len

	return pos
end

local function save()
	return {
		buff = outgoing_buff,
		used = outgoing_used,
		size = outgoing_size,
		inst = outgoing_inst,
	}
end

local function load(data: {
	buff: buffer,
	used: number,
	size: number,
	inst: { Instance },
})
	outgoing_buff = data.buff
	outgoing_used = data.used
	outgoing_size = data.size
	outgoing_inst = data.inst
end

local function load_empty()
	outgoing_buff = buffer.create(64)
	outgoing_used = 0
	outgoing_size = 64
	outgoing_inst = {}
end

load_empty()

local types = {}
if not RunService:IsRunning() then
	local noop = function() end
	return table.freeze({
		SendEvents = noop,
		RequestReplication = table.freeze({
			Fire = noop
		}),
		BroadcastReplication = table.freeze({
			SetCallback = noop
		}),
	}) :: Events
end
if RunService:IsServer() then
	error("Cannot use the client module on the server!")
end
local remotes = ReplicatedStorage:WaitForChild("ZAP")
local reliable = remotes:WaitForChild("ZAP_RELIABLE")
local unreliable = remotes:WaitForChild("ZAP_UNRELIABLE")

assert(reliable:IsA("RemoteEvent"), "Expected ZAP_RELIABLE to be a RemoteEvent")
assert(unreliable:IsA("UnreliableRemoteEvent"), "Expected ZAP_UNRELIABLE to be an UnreliableRemoteEvent")


local function SendEvents()
	if outgoing_used ~= 0 then
		local buff = buffer.create(outgoing_used)
		buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)

		reliable:FireServer(buff, outgoing_inst)

		outgoing_buff = buffer.create(64)
		outgoing_used = 0
		outgoing_size = 64
		table.clear(outgoing_inst)
	end
end

RunService.Heartbeat:Connect(SendEvents)

local events = table.create(2)
local event_queue: { [number]: { any } } = table.create(2)
event_queue[2] = {}
unreliable.OnClientEvent:Connect(function(buff, inst)
	incoming_buff = buff
	incoming_inst = inst
	incoming_read = 0
	incoming_ipos = 0
	local id = buffer.readu8(buff, read(1))
	if id == 2 then
		local value
		value = {}
		value.frame = buffer.readu8(incoming_buff, read(1))
		value.cframes = {}
		local len_1 = buffer.readu16(incoming_buff, read(2))
		assert(len_1 >= 1)
		assert(len_1 <= 31)
		for i_1 = 1, len_1 do
			local val_1
			local pos_1 = Vector3.new(buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)))
			local axisangle_1 = Vector3.new(buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)))
			local angle_1 = axisangle_1.Magnitude
			if angle_1 ~= 0 then
				val_1 = CFrame.fromAxisAngle(axisangle_1, angle_1) + pos_1
			else
				val_1 = CFrame.new(pos_1)
			end
			value.cframes[i_1] = val_1
		end
		value.roots = {}
		local len_2 = buffer.readu16(incoming_buff, read(2))
		assert(len_2 >= 1)
		assert(len_2 <= 31)
		for i_2 = 1, len_2 do
			local val_2
			incoming_ipos = incoming_ipos + 1
			val_2 = incoming_inst[incoming_ipos]
			assert(val_2 ~= nil)
			assert(val_2:IsA("BasePart"))
			value.roots[i_2] = val_2
		end
		if events[2] then
			task.spawn(events[2], value)
		else
			table.insert(event_queue[2], value)
			if #event_queue[2] > 64 then
				warn(`[ZAP] {#event_queue[2]} events in queue for BroadcastReplication. Did you forget to attach a listener?`)
			end
		end
	else
		error("Unknown event id")
	end
end)
local returns = {
	SendEvents = SendEvents,
	RequestReplication = {
		Fire = function(Value: ({
			cframe: (CFrame),
		}))
			local saved = save()
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 1)
			local axis_1, angle_1 = Value.cframe:ToAxisAngle()
			axis_1 = axis_1 * angle_1
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.cframe.Position.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.cframe.Position.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.cframe.Position.Z)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, axis_1.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, axis_1.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, axis_1.Z)
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			unreliable:FireServer(buff, outgoing_inst)
			load(saved)
		end,
	},
	BroadcastReplication = {
		SetCallback = function(Callback: (({
			frame: (number),
			cframes: ({ (CFrame) }),
			roots: ({ (BasePart) }),
		})) -> ()): () -> ()
			events[2] = Callback
			for _, value in event_queue[2] do
				task.spawn(Callback, value)
			end
			event_queue[2] = {}
			return function()
				events[2] = nil
			end
		end,
	},
}
type Events = typeof(returns)
return returns
