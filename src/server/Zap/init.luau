--!native
--!optimize 2
--!nocheck
--!nolint
--#selene: allow(unused_variable, incorrect_standard_library_use, global_usage)
-- Server generated by Zap v0.6.14 (https://github.com/red-blox/zap)
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

local outgoing_buff: buffer
local outgoing_used: number
local outgoing_size: number
local outgoing_inst: { Instance }
local outgoing_apos: number

local incoming_buff: buffer
local incoming_read: number
local incoming_inst: { Instance }
local incoming_ipos: number

-- thanks to https://dom.rojo.space/binary.html#cframe
local CFrameSpecialCases = {
	CFrame.Angles(0, 0, 0),
	CFrame.Angles(math.rad(90), 0, 0),
	CFrame.Angles(0, math.rad(180), math.rad(180)),
	CFrame.Angles(math.rad(-90), 0, 0),
	CFrame.Angles(0, math.rad(180), math.rad(90)),
	CFrame.Angles(0, math.rad(90), math.rad(90)),
	CFrame.Angles(0, 0, math.rad(90)),
	CFrame.Angles(0, math.rad(-90), math.rad(90)),
	CFrame.Angles(math.rad(-90), math.rad(-90), 0),
	CFrame.Angles(0, math.rad(-90), 0),
	CFrame.Angles(math.rad(90), math.rad(-90), 0),
	CFrame.Angles(0, math.rad(90), math.rad(180)),
	CFrame.Angles(0, math.rad(-90), math.rad(180)),
	CFrame.Angles(0, math.rad(180), math.rad(0)),
	CFrame.Angles(math.rad(-90), math.rad(-180), math.rad(0)),
	CFrame.Angles(0, math.rad(0), math.rad(180)),
	CFrame.Angles(math.rad(90), math.rad(180), math.rad(0)),
	CFrame.Angles(0, math.rad(0), math.rad(-90)),
	CFrame.Angles(0, math.rad(-90), math.rad(-90)),
	CFrame.Angles(0, math.rad(-180), math.rad(-90)),
	CFrame.Angles(0, math.rad(90), math.rad(-90)),
	CFrame.Angles(math.rad(90), math.rad(90), 0),
	CFrame.Angles(0, math.rad(90), 0),
	CFrame.Angles(math.rad(-90), math.rad(90), 0),
}

local function alloc(len: number)
	if outgoing_used + len > outgoing_size then
		while outgoing_used + len > outgoing_size do
			outgoing_size = outgoing_size * 2
		end

		local new_buff = buffer.create(outgoing_size)
		buffer.copy(new_buff, 0, outgoing_buff, 0, outgoing_used)

		outgoing_buff = new_buff
	end

	outgoing_apos = outgoing_used
	outgoing_used = outgoing_used + len

	return outgoing_apos
end

local function read(len: number)
	local pos = incoming_read
	incoming_read = incoming_read + len

	return pos
end

local function save()
	return {
		buff = outgoing_buff,
		used = outgoing_used,
		size = outgoing_size,
		inst = outgoing_inst,
	}
end

local function load(data: {
	buff: buffer,
	used: number,
	size: number,
	inst: { Instance },
})
	outgoing_buff = data.buff
	outgoing_used = data.used
	outgoing_size = data.size
	outgoing_inst = data.inst
end

local function load_empty()
	outgoing_buff = buffer.create(64)
	outgoing_used = 0
	outgoing_size = 64
	outgoing_inst = {}
end

load_empty()

local types = {}
if not RunService:IsRunning() then
	local noop = function() end
	return table.freeze({
		SendEvents = noop,
		RequestReplication = table.freeze({
			SetCallback = noop
		}),
		BroadcastReplication = table.freeze({
			Fire = noop,
			FireAll = noop,
			FireExcept = noop,
			FireList = noop,
			FireSet = noop
		}),
		UpdateEntity = table.freeze({
			Fire = noop,
			FireAll = noop,
			FireExcept = noop,
			FireList = noop,
			FireSet = noop
		}),
		RequestServerTick = table.freeze({
			SetCallback = noop
		}),
		RequestEntities = table.freeze({
			SetCallback = noop
		}),
	}) :: Events
end
local Players = game:GetService("Players")

if RunService:IsClient() then
	error("Cannot use the server module on the client!")
end

local remotes = ReplicatedStorage:FindFirstChild("ZAP")
if remotes == nil then
	remotes = Instance.new("Folder")
	remotes.Name = "ZAP"
	remotes.Parent = ReplicatedStorage
end

local reliable = remotes:FindFirstChild("ZAP_RELIABLE")
if reliable == nil then
	reliable = Instance.new("RemoteEvent")
	reliable.Name = "ZAP_RELIABLE"
	reliable.Parent = remotes
end

local unreliable = remotes:FindFirstChild("ZAP_UNRELIABLE")
if unreliable == nil then
	unreliable = Instance.new("UnreliableRemoteEvent")
	unreliable.Name = "ZAP_UNRELIABLE"
	unreliable.Parent = remotes
end

local player_map = {}

local function load_player(player: Player)
	if player_map[player] then
		load(player_map[player])
	else
		load_empty()
	end
end

Players.PlayerRemoving:Connect(function(player)
	player_map[player] = nil
end)

local function SendEvents()
	for player, outgoing in player_map do
		if outgoing.used > 0 then
			local buff = buffer.create(outgoing.used)
			buffer.copy(buff, 0, outgoing.buff, 0, outgoing.used)

			reliable:FireClient(player, buff, outgoing.inst)

			outgoing.buff = buffer.create(64)
			outgoing.used = 0
			outgoing.size = 64
			table.clear(outgoing.inst)
		end
	end
end

RunService.Heartbeat:Connect(SendEvents)

local events = table.create(5)
reliable.OnServerEvent:Connect(function(player, buff, inst)
	incoming_buff = buff
	incoming_inst = inst
	incoming_read = 0
	incoming_ipos = 0
	local len = buffer.len(buff)
	while incoming_read < len do
		local id = buffer.readu8(buff, read(1))
		if id == 4 then
			local call_id = buffer.readu8(buff, read(1))
			local value
			if events[4] then
				task.spawn(function(player_2, call_id_2, value_2)
					local rets = events[4](player_2, value_2)
					load_player(player_2)
					alloc(1)
					buffer.writeu8(outgoing_buff, outgoing_apos, 4)
					alloc(1)
					buffer.writeu8(outgoing_buff, outgoing_apos, call_id_2)
					alloc(1)
					buffer.writeu8(outgoing_buff, outgoing_apos, rets)
					player_map[player_2] = save()
				end, player, call_id, value)
			end
		elseif id == 5 then
			local call_id = buffer.readu8(buff, read(1))
			local value
			if events[5] then
				task.spawn(function(player_2, call_id_2, value_2)
					local rets = events[5](player_2, value_2)
					load_player(player_2)
					alloc(1)
					buffer.writeu8(outgoing_buff, outgoing_apos, 5)
					alloc(1)
					buffer.writeu8(outgoing_buff, outgoing_apos, call_id_2)
					if rets == nil then
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 0)
					else
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 1)
						local len_1 = #rets
						assert(len_1 >= 1)
						assert(len_1 <= 50)
						alloc(2)
						buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
						for i_1 = 1, len_1 do
							local val_1 = rets[i_1]
							alloc(1)
							buffer.writeu8(outgoing_buff, outgoing_apos, val_1.entity)
							assert(val_1.player:IsA("Player"))
							table.insert(outgoing_inst, val_1.player)
						end
					end
					player_map[player_2] = save()
				end, player, call_id, value)
			end
		else
			error("Unknown event id")
		end
	end
end)
unreliable.OnServerEvent:Connect(function(player, buff, inst)
	incoming_buff = buff
	incoming_inst = inst
	incoming_read = 0
	incoming_ipos = 0
	local id = buffer.readu8(buff, read(1))
	if id == 1 then
		local value
		value = {}
		value.x = buffer.readf32(incoming_buff, read(4))
		value.y = buffer.readf32(incoming_buff, read(4))
		value.z = buffer.readf32(incoming_buff, read(4))
		value.yRotation = buffer.readf32(incoming_buff, read(4))
		if events[1] then
			task.spawn(events[1], player, value)
		end
	else
		error("Unknown event id")
	end
end)
local returns = {
	SendEvents = SendEvents,
	BroadcastReplication = {
		Fire = function(Player: Player, Value: ({
			tick: (number),
			map: ({ ({
				entity: (number),
				x: (number),
				y: (number),
				z: (number),
				yRotation: (number),
			}) }),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 2)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, Value.tick)
			local len_1 = #Value.map
			assert(len_1 >= 1)
			assert(len_1 <= 50)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			for i_1 = 1, len_1 do
				local val_1 = Value.map[i_1]
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, val_1.entity)
				alloc(4)
				buffer.writef32(outgoing_buff, outgoing_apos, val_1.x)
				alloc(4)
				buffer.writef32(outgoing_buff, outgoing_apos, val_1.y)
				alloc(4)
				buffer.writef32(outgoing_buff, outgoing_apos, val_1.z)
				alloc(4)
				buffer.writef32(outgoing_buff, outgoing_apos, val_1.yRotation)
			end
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			unreliable:FireClient(Player, buff, outgoing_inst)
		end,
		FireAll = function(Value: ({
			tick: (number),
			map: ({ ({
				entity: (number),
				x: (number),
				y: (number),
				z: (number),
				yRotation: (number),
			}) }),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 2)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, Value.tick)
			local len_1 = #Value.map
			assert(len_1 >= 1)
			assert(len_1 <= 50)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			for i_1 = 1, len_1 do
				local val_1 = Value.map[i_1]
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, val_1.entity)
				alloc(4)
				buffer.writef32(outgoing_buff, outgoing_apos, val_1.x)
				alloc(4)
				buffer.writef32(outgoing_buff, outgoing_apos, val_1.y)
				alloc(4)
				buffer.writef32(outgoing_buff, outgoing_apos, val_1.z)
				alloc(4)
				buffer.writef32(outgoing_buff, outgoing_apos, val_1.yRotation)
			end
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			unreliable:FireAllClients(buff, outgoing_inst)
		end,
		FireExcept = function(Except: Player, Value: ({
			tick: (number),
			map: ({ ({
				entity: (number),
				x: (number),
				y: (number),
				z: (number),
				yRotation: (number),
			}) }),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 2)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, Value.tick)
			local len_1 = #Value.map
			assert(len_1 >= 1)
			assert(len_1 <= 50)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			for i_1 = 1, len_1 do
				local val_1 = Value.map[i_1]
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, val_1.entity)
				alloc(4)
				buffer.writef32(outgoing_buff, outgoing_apos, val_1.x)
				alloc(4)
				buffer.writef32(outgoing_buff, outgoing_apos, val_1.y)
				alloc(4)
				buffer.writef32(outgoing_buff, outgoing_apos, val_1.z)
				alloc(4)
				buffer.writef32(outgoing_buff, outgoing_apos, val_1.yRotation)
			end
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			for _, player in Players:GetPlayers() do
				if player ~= Except then
					unreliable:FireClient(player, buff, outgoing_inst)
				end
			end
		end,
		FireList = function(List: { Player }, Value: ({
			tick: (number),
			map: ({ ({
				entity: (number),
				x: (number),
				y: (number),
				z: (number),
				yRotation: (number),
			}) }),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 2)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, Value.tick)
			local len_1 = #Value.map
			assert(len_1 >= 1)
			assert(len_1 <= 50)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			for i_1 = 1, len_1 do
				local val_1 = Value.map[i_1]
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, val_1.entity)
				alloc(4)
				buffer.writef32(outgoing_buff, outgoing_apos, val_1.x)
				alloc(4)
				buffer.writef32(outgoing_buff, outgoing_apos, val_1.y)
				alloc(4)
				buffer.writef32(outgoing_buff, outgoing_apos, val_1.z)
				alloc(4)
				buffer.writef32(outgoing_buff, outgoing_apos, val_1.yRotation)
			end
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			for _, player in List do
				unreliable:FireClient(player, buff, outgoing_inst)
			end
		end,
		FireSet = function(Set: { [Player]: true }, Value: ({
			tick: (number),
			map: ({ ({
				entity: (number),
				x: (number),
				y: (number),
				z: (number),
				yRotation: (number),
			}) }),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 2)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, Value.tick)
			local len_1 = #Value.map
			assert(len_1 >= 1)
			assert(len_1 <= 50)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			for i_1 = 1, len_1 do
				local val_1 = Value.map[i_1]
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, val_1.entity)
				alloc(4)
				buffer.writef32(outgoing_buff, outgoing_apos, val_1.x)
				alloc(4)
				buffer.writef32(outgoing_buff, outgoing_apos, val_1.y)
				alloc(4)
				buffer.writef32(outgoing_buff, outgoing_apos, val_1.z)
				alloc(4)
				buffer.writef32(outgoing_buff, outgoing_apos, val_1.yRotation)
			end
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			for player in Set do
				unreliable:FireClient(player, buff, outgoing_inst)
			end
		end,
	},
	UpdateEntity = {
		Fire = function(Player: Player, Value: ({
			entity: (number),
			player: (Player),
			added: (boolean),
		}))
			load_player(Player)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 3)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, Value.entity)
			assert(Value.player:IsA("Player"))
			table.insert(outgoing_inst, Value.player)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, Value.added and 1 or 0)
			player_map[Player] = save()
		end,
		FireAll = function(Value: ({
			entity: (number),
			player: (Player),
			added: (boolean),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 3)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, Value.entity)
			assert(Value.player:IsA("Player"))
			table.insert(outgoing_inst, Value.player)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, Value.added and 1 or 0)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireExcept = function(Except: Player, Value: ({
			entity: (number),
			player: (Player),
			added: (boolean),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 3)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, Value.entity)
			assert(Value.player:IsA("Player"))
			table.insert(outgoing_inst, Value.player)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, Value.added and 1 or 0)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				if player ~= Except then
					load_player(player)
					alloc(used)
					buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
					table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
					player_map[player] = save()
				end
			end
		end,
		FireList = function(List: { Player }, Value: ({
			entity: (number),
			player: (Player),
			added: (boolean),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 3)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, Value.entity)
			assert(Value.player:IsA("Player"))
			table.insert(outgoing_inst, Value.player)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, Value.added and 1 or 0)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in List do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireSet = function(Set: { [Player]: true }, Value: ({
			entity: (number),
			player: (Player),
			added: (boolean),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 3)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, Value.entity)
			assert(Value.player:IsA("Player"))
			table.insert(outgoing_inst, Value.player)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, Value.added and 1 or 0)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for player in Set do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
	},
	RequestReplication = {
		SetCallback = function(Callback: (Player, ({
			x: (number),
			y: (number),
			z: (number),
			yRotation: (number),
		})) -> ()): () -> ()
			events[1] = Callback
			return function()
				events[1] = nil
			end
		end,
	},
	RequestServerTick = {
		SetCallback = function(Callback: (Player) -> ((number))): () -> ()
			events[4] = Callback
			return function()
				events[4] = nil
			end
		end,
	},
	RequestEntities = {
		SetCallback = function(Callback: (Player) -> ((({ ({
			entity: (number),
			player: (Player),
		}) })?))): () -> ()
			events[5] = Callback
			return function()
				events[5] = nil
			end
		end,
	},
}
type Events = typeof(returns)
return returns
