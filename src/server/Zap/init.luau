--!native
--!optimize 2
--!nocheck
--!nolint
--#selene: allow(unused_variable, incorrect_standard_library_use, global_usage)
-- Server generated by Zap v0.6.14 (https://github.com/red-blox/zap)
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

local outgoing_buff: buffer
local outgoing_used: number
local outgoing_size: number
local outgoing_inst: { Instance }
local outgoing_apos: number

local incoming_buff: buffer
local incoming_read: number
local incoming_inst: { Instance }
local incoming_ipos: number

-- thanks to https://dom.rojo.space/binary.html#cframe
local CFrameSpecialCases = {
	CFrame.Angles(0, 0, 0),
	CFrame.Angles(math.rad(90), 0, 0),
	CFrame.Angles(0, math.rad(180), math.rad(180)),
	CFrame.Angles(math.rad(-90), 0, 0),
	CFrame.Angles(0, math.rad(180), math.rad(90)),
	CFrame.Angles(0, math.rad(90), math.rad(90)),
	CFrame.Angles(0, 0, math.rad(90)),
	CFrame.Angles(0, math.rad(-90), math.rad(90)),
	CFrame.Angles(math.rad(-90), math.rad(-90), 0),
	CFrame.Angles(0, math.rad(-90), 0),
	CFrame.Angles(math.rad(90), math.rad(-90), 0),
	CFrame.Angles(0, math.rad(90), math.rad(180)),
	CFrame.Angles(0, math.rad(-90), math.rad(180)),
	CFrame.Angles(0, math.rad(180), math.rad(0)),
	CFrame.Angles(math.rad(-90), math.rad(-180), math.rad(0)),
	CFrame.Angles(0, math.rad(0), math.rad(180)),
	CFrame.Angles(math.rad(90), math.rad(180), math.rad(0)),
	CFrame.Angles(0, math.rad(0), math.rad(-90)),
	CFrame.Angles(0, math.rad(-90), math.rad(-90)),
	CFrame.Angles(0, math.rad(-180), math.rad(-90)),
	CFrame.Angles(0, math.rad(90), math.rad(-90)),
	CFrame.Angles(math.rad(90), math.rad(90), 0),
	CFrame.Angles(0, math.rad(90), 0),
	CFrame.Angles(math.rad(-90), math.rad(90), 0),
}

local function alloc(len: number)
	if outgoing_used + len > outgoing_size then
		while outgoing_used + len > outgoing_size do
			outgoing_size = outgoing_size * 2
		end

		local new_buff = buffer.create(outgoing_size)
		buffer.copy(new_buff, 0, outgoing_buff, 0, outgoing_used)

		outgoing_buff = new_buff
	end

	outgoing_apos = outgoing_used
	outgoing_used = outgoing_used + len

	return outgoing_apos
end

local function read(len: number)
	local pos = incoming_read
	incoming_read = incoming_read + len

	return pos
end

local function save()
	return {
		buff = outgoing_buff,
		used = outgoing_used,
		size = outgoing_size,
		inst = outgoing_inst,
	}
end

local function load(data: {
	buff: buffer,
	used: number,
	size: number,
	inst: { Instance },
})
	outgoing_buff = data.buff
	outgoing_used = data.used
	outgoing_size = data.size
	outgoing_inst = data.inst
end

local function load_empty()
	outgoing_buff = buffer.create(64)
	outgoing_used = 0
	outgoing_size = 64
	outgoing_inst = {}
end

load_empty()

local types = {}
if not RunService:IsRunning() then
	local noop = function() end
	return table.freeze({
		SendEvents = noop,
		RequestReplication = table.freeze({
			SetCallback = noop
		}),
		BroadcastReplication = table.freeze({
			Fire = noop,
			FireAll = noop,
			FireExcept = noop,
			FireList = noop,
			FireSet = noop
		}),
	}) :: Events
end
local Players = game:GetService("Players")

if RunService:IsClient() then
	error("Cannot use the server module on the client!")
end

local remotes = ReplicatedStorage:FindFirstChild("ZAP")
if remotes == nil then
	remotes = Instance.new("Folder")
	remotes.Name = "ZAP"
	remotes.Parent = ReplicatedStorage
end

local reliable = remotes:FindFirstChild("ZAP_RELIABLE")
if reliable == nil then
	reliable = Instance.new("RemoteEvent")
	reliable.Name = "ZAP_RELIABLE"
	reliable.Parent = remotes
end

local unreliable = remotes:FindFirstChild("ZAP_UNRELIABLE")
if unreliable == nil then
	unreliable = Instance.new("UnreliableRemoteEvent")
	unreliable.Name = "ZAP_UNRELIABLE"
	unreliable.Parent = remotes
end

local player_map = {}

local function load_player(player: Player)
	if player_map[player] then
		load(player_map[player])
	else
		load_empty()
	end
end

Players.PlayerRemoving:Connect(function(player)
	player_map[player] = nil
end)

local function SendEvents()
	for player, outgoing in player_map do
		if outgoing.used > 0 then
			local buff = buffer.create(outgoing.used)
			buffer.copy(buff, 0, outgoing.buff, 0, outgoing.used)

			reliable:FireClient(player, buff, outgoing.inst)

			outgoing.buff = buffer.create(64)
			outgoing.used = 0
			outgoing.size = 64
			table.clear(outgoing.inst)
		end
	end
end

RunService.Heartbeat:Connect(SendEvents)

local events = table.create(2)
unreliable.OnServerEvent:Connect(function(player, buff, inst)
	incoming_buff = buff
	incoming_inst = inst
	incoming_read = 0
	incoming_ipos = 0
	local id = buffer.readu8(buff, read(1))
	if id == 1 then
		local value
		value = {}
		local pos_1 = Vector3.new(buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)))
		local axisangle_1 = Vector3.new(buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)))
		local angle_1 = axisangle_1.Magnitude
		if angle_1 ~= 0 then
			value.cframe = CFrame.fromAxisAngle(axisangle_1, angle_1) + pos_1
		else
			value.cframe = CFrame.new(pos_1)
		end
		if events[1] then
			task.spawn(events[1], player, value)
		end
	else
		error("Unknown event id")
	end
end)
local returns = {
	SendEvents = SendEvents,
	BroadcastReplication = {
		Fire = function(Player: Player, Value: ({ ({
			root: (BasePart),
			cframe: (CFrame),
		}) }))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 2)
			local len_1 = #Value
			assert(len_1 >= 1)
			assert(len_1 <= 31)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			for i_1 = 1, len_1 do
				local val_1 = Value[i_1]
				assert(val_1.root:IsA("BasePart"))
				table.insert(outgoing_inst, val_1.root)
				local axis_1, angle_1 = val_1.cframe:ToAxisAngle()
				axis_1 = axis_1 * angle_1
				alloc(4)
				buffer.writef32(outgoing_buff, outgoing_apos, val_1.cframe.Position.X)
				alloc(4)
				buffer.writef32(outgoing_buff, outgoing_apos, val_1.cframe.Position.Y)
				alloc(4)
				buffer.writef32(outgoing_buff, outgoing_apos, val_1.cframe.Position.Z)
				alloc(4)
				buffer.writef32(outgoing_buff, outgoing_apos, axis_1.X)
				alloc(4)
				buffer.writef32(outgoing_buff, outgoing_apos, axis_1.Y)
				alloc(4)
				buffer.writef32(outgoing_buff, outgoing_apos, axis_1.Z)
			end
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			unreliable:FireClient(Player, buff, outgoing_inst)
		end,
		FireAll = function(Value: ({ ({
			root: (BasePart),
			cframe: (CFrame),
		}) }))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 2)
			local len_1 = #Value
			assert(len_1 >= 1)
			assert(len_1 <= 31)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			for i_1 = 1, len_1 do
				local val_1 = Value[i_1]
				assert(val_1.root:IsA("BasePart"))
				table.insert(outgoing_inst, val_1.root)
				local axis_1, angle_1 = val_1.cframe:ToAxisAngle()
				axis_1 = axis_1 * angle_1
				alloc(4)
				buffer.writef32(outgoing_buff, outgoing_apos, val_1.cframe.Position.X)
				alloc(4)
				buffer.writef32(outgoing_buff, outgoing_apos, val_1.cframe.Position.Y)
				alloc(4)
				buffer.writef32(outgoing_buff, outgoing_apos, val_1.cframe.Position.Z)
				alloc(4)
				buffer.writef32(outgoing_buff, outgoing_apos, axis_1.X)
				alloc(4)
				buffer.writef32(outgoing_buff, outgoing_apos, axis_1.Y)
				alloc(4)
				buffer.writef32(outgoing_buff, outgoing_apos, axis_1.Z)
			end
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			unreliable:FireAllClients(buff, outgoing_inst)
		end,
		FireExcept = function(Except: Player, Value: ({ ({
			root: (BasePart),
			cframe: (CFrame),
		}) }))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 2)
			local len_1 = #Value
			assert(len_1 >= 1)
			assert(len_1 <= 31)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			for i_1 = 1, len_1 do
				local val_1 = Value[i_1]
				assert(val_1.root:IsA("BasePart"))
				table.insert(outgoing_inst, val_1.root)
				local axis_1, angle_1 = val_1.cframe:ToAxisAngle()
				axis_1 = axis_1 * angle_1
				alloc(4)
				buffer.writef32(outgoing_buff, outgoing_apos, val_1.cframe.Position.X)
				alloc(4)
				buffer.writef32(outgoing_buff, outgoing_apos, val_1.cframe.Position.Y)
				alloc(4)
				buffer.writef32(outgoing_buff, outgoing_apos, val_1.cframe.Position.Z)
				alloc(4)
				buffer.writef32(outgoing_buff, outgoing_apos, axis_1.X)
				alloc(4)
				buffer.writef32(outgoing_buff, outgoing_apos, axis_1.Y)
				alloc(4)
				buffer.writef32(outgoing_buff, outgoing_apos, axis_1.Z)
			end
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			for _, player in Players:GetPlayers() do
				if player ~= Except then
					unreliable:FireClient(player, buff, outgoing_inst)
				end
			end
		end,
		FireList = function(List: { Player }, Value: ({ ({
			root: (BasePart),
			cframe: (CFrame),
		}) }))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 2)
			local len_1 = #Value
			assert(len_1 >= 1)
			assert(len_1 <= 31)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			for i_1 = 1, len_1 do
				local val_1 = Value[i_1]
				assert(val_1.root:IsA("BasePart"))
				table.insert(outgoing_inst, val_1.root)
				local axis_1, angle_1 = val_1.cframe:ToAxisAngle()
				axis_1 = axis_1 * angle_1
				alloc(4)
				buffer.writef32(outgoing_buff, outgoing_apos, val_1.cframe.Position.X)
				alloc(4)
				buffer.writef32(outgoing_buff, outgoing_apos, val_1.cframe.Position.Y)
				alloc(4)
				buffer.writef32(outgoing_buff, outgoing_apos, val_1.cframe.Position.Z)
				alloc(4)
				buffer.writef32(outgoing_buff, outgoing_apos, axis_1.X)
				alloc(4)
				buffer.writef32(outgoing_buff, outgoing_apos, axis_1.Y)
				alloc(4)
				buffer.writef32(outgoing_buff, outgoing_apos, axis_1.Z)
			end
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			for _, player in List do
				unreliable:FireClient(player, buff, outgoing_inst)
			end
		end,
		FireSet = function(Set: { [Player]: true }, Value: ({ ({
			root: (BasePart),
			cframe: (CFrame),
		}) }))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 2)
			local len_1 = #Value
			assert(len_1 >= 1)
			assert(len_1 <= 31)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_1)
			for i_1 = 1, len_1 do
				local val_1 = Value[i_1]
				assert(val_1.root:IsA("BasePart"))
				table.insert(outgoing_inst, val_1.root)
				local axis_1, angle_1 = val_1.cframe:ToAxisAngle()
				axis_1 = axis_1 * angle_1
				alloc(4)
				buffer.writef32(outgoing_buff, outgoing_apos, val_1.cframe.Position.X)
				alloc(4)
				buffer.writef32(outgoing_buff, outgoing_apos, val_1.cframe.Position.Y)
				alloc(4)
				buffer.writef32(outgoing_buff, outgoing_apos, val_1.cframe.Position.Z)
				alloc(4)
				buffer.writef32(outgoing_buff, outgoing_apos, axis_1.X)
				alloc(4)
				buffer.writef32(outgoing_buff, outgoing_apos, axis_1.Y)
				alloc(4)
				buffer.writef32(outgoing_buff, outgoing_apos, axis_1.Z)
			end
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			for player in Set do
				unreliable:FireClient(player, buff, outgoing_inst)
			end
		end,
	},
	RequestReplication = {
		SetCallback = function(Callback: (Player, ({
			cframe: (CFrame),
		})) -> ()): () -> ()
			events[1] = Callback
			return function()
				events[1] = nil
			end
		end,
	},
}
type Events = typeof(returns)
return returns
